import { createStitches, PropertyValue, ScaleValue } from '@stitches/react';
import { red, pink, blue, pear, amber, grey } from './colors';

export const { styled, css, globalCss, keyframes, getCssText, theme, createTheme, config } = createStitches({
  media: {
    sm: '(min-width: 576px)',
    md: '(min-width: 768px)',
    lg: '(min-width: 992px)',
    xl: '(min-width: 1200px)',
  },
  theme: {
    colors: {
      primary10: blue[10],
      primary20: blue[20],
      primary30: blue[30],
      primary40: blue[40],
      primary50: blue[50],
      primary60: blue[60],
      primary70: blue[70],
      primary80: blue[80],
      primary90: blue[90],
      primary100: blue[100],
      secondary10: pink[10],
      secondary20: pink[20],
      secondary30: pink[30],
      secondary40: pink[40],
      secondary50: pink[50],
      secondary60: pink[60],
      secondary70: pink[70],
      secondary80: pink[80],
      secondary90: pink[90],
      secondary100: pink[100],
      error10: red[10],
      error20: red[20],
      error200: red[30],
      error300: red[40],
      error400: red[50],
      error500: red[60],
      error600: red[70],
      error700: red[80],
      error800: red[90],
      error900: red[100],
      success10: pear[10],
      success20: pear[20],
      success30: pear[30],
      success40: pear[40],
      success50: pear[50],
      success60: pear[60],
      success70: pear[70],
      success80: pear[80],
      success90: pear[90],
      success100: pear[100],
      warning10: amber[10],
      warning20: amber[20],
      warning30: amber[30],
      warning40: amber[40],
      warning50: amber[50],
      warning60: amber[60],
      warning70: amber[70],
      warning80: amber[80],
      warning90: amber[90],
      warning100: amber[100],
      grey5: grey[5],
      grey10: grey[10],
      grey20: grey[20],
      grey30: grey[30],
      grey40: grey[40],
      grey50: grey[50],
      grey60: grey[60],
      grey70: grey[70],
      grey80: grey[80],
      grey90: grey[90],
      grey100: grey[100],
      white: 'hsl(0, 0%, 100%)',
      black: 'hsl(0, 0%, 0%)',
      transparent: 'transparent',
    },
    radii: {
      0: '0px',
      2: '2px',
      3: '3px',
      4: '4px',
      5: '5px',
      6: '6px',
      10: '10px',
      cylinder: '9999px',
      rounded: '50%',
    },
    shadows: {
      sm: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',
      md: '0px 0px 6px rgba(0, 0, 0, 0.2);',
    },
    zIndices: {
      z0: 0,
      z10: 10,
      z20: 20,
      z30: 30,
      z40: 40,
      z50: 50,
      z99: 99,
      z999: 999,
      z1000: 1000,
      zAuto: 'auto',
    },
    transitions: {
      colors:
        'color 300ms cubic-bezier(0.4, 0, 0.2, 1), background-color 300ms cubic-bezier(0.4, 0, 0.2, 1), border-color 300ms cubic-bezier(0.4, 0, 0.2, 1), text-decoration-color 300ms cubic-bezier(0.4, 0, 0.2, 1), fill 300ms cubic-bezier(0.4, 0, 0.2, 1), stroke 300ms cubic-bezier(0.4, 0, 0.2, 1)',
    },
  },
  utils: {
    m: (value: PropertyValue<'margin'> | ScaleValue<'space'>) => ({
      marginLeft: value,
      marginRight: value,
      marginTop: value,
      marginBottom: value,
    }),
    mx: (value: PropertyValue<'marginLeft' | 'marginRight'> | ScaleValue<'space'>) => ({
      marginLeft: value,
      marginRight: value,
    }),
    my: (value: PropertyValue<'marginTop' | 'marginBottom'>) => ({ marginTop: value, marginBottom: value }),
    mt: (value: PropertyValue<'marginTop'> | ScaleValue<'space'>) => ({ marginTop: value }),
    mr: (value: PropertyValue<'marginRight'> | ScaleValue<'space'>) => ({ marginRight: value }),
    mb: (value: PropertyValue<'marginBottom'> | ScaleValue<'space'>) => ({ marginBottom: value }),
    ml: (value: PropertyValue<'marginLeft'> | ScaleValue<'space'>) => ({ marginLeft: value }),
    p: (value: PropertyValue<'padding'> | ScaleValue<'space'>) => ({
      paddingLeft: value,
      paddingRight: value,
      paddingTop: value,
      paddingBottom: value,
    }),
    px: (value: PropertyValue<'paddingLeft' | 'paddingRight'> | ScaleValue<'space'>) => ({
      paddingLeft: value,
      paddingRight: value,
    }),
    py: (value: PropertyValue<'paddingTop' | 'paddingBottom'> | ScaleValue<'space'>) => ({
      paddingTop: value,
      paddingBottom: value,
    }),
    pt: (value: PropertyValue<'paddingTop'> | ScaleValue<'space'>) => ({ paddingTop: value }),
    pr: (value: PropertyValue<'paddingRight'> | ScaleValue<'space'>) => ({ paddingRight: value }),
    pb: (value: PropertyValue<'paddingBottom'> | ScaleValue<'space'>) => ({ paddingBottom: value }),
    pl: (value: PropertyValue<'paddingLeft'> | ScaleValue<'space'>) => ({ paddingLeft: value }),
  },
});
